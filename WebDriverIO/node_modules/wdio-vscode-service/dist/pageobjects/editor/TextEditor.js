var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { fileURLToPath } from 'node:url';
import clipboard from 'clipboardy';
import { Key } from 'webdriverio';
import { ContentAssist, ContextMenu, InputBox } from '../index.js';
import { StatusBar } from '../statusBar/StatusBar.js';
import { Editor } from './Editor.js';
import { PageDecorator, BasePage, ElementWithContextMenu } from '../utils.js';
import { TextEditor as TextEditorLocators, FindWidget as FindWidgetLocators } from '../../locators/1.73.0.js';
import { CMD_KEY } from '../../constants.js';
/**
 * Page object representing the active text editor
 *
 * @category Editor
 */
let TextEditor = class TextEditor extends Editor {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'TextEditor';
    }
    /**
     * Find whether the active editor has unsaved changes
     * @returns Promise resolving to true/false
     */
    async isDirty() {
        const klass = await this.parent.$(this.locators.activeTab).getAttribute('class');
        return klass.indexOf('dirty') >= 0;
    }
    /**
     * Saves the active editor
     * @returns Promise resolving when ctrl+s is invoked
     */
    async save() {
        await browser.action('key')
            .down(CMD_KEY).down('s')
            .pause(10)
            .up(CMD_KEY).up('s')
            .perform();
    }
    /**
     * Open the Save as prompt
     *
     * @returns InputBox serving as a simple file dialog
     */
    async saveAs() {
        await browser.action('key')
            .down(CMD_KEY).down(Key.Shift).down('s')
            .pause(10)
            .up(CMD_KEY).down(Key.Shift).up('s')
            .perform();
        const inputBox = browser.$(this.locatorMap.InputBox.elem);
        await inputBox.waitForExist({ timeout: 5000 });
        return new InputBox(this.locatorMap, inputBox);
    }
    /**
     * Retrieve the Uri of the file opened in the active editor
     * @returns Promise resolving to editor's underlying Uri
     */
    async getFileUri() {
        const ed = await this.editorContainer$;
        return ed.getAttribute(this.locators.dataUri);
    }
    /**
     * Retrieve the path to the file opened in the active editor
     * @returns Promise resolving to editor's underlying file path
     */
    async getFilePath() {
        return fileURLToPath(await this.getFileUri());
    }
    /**
     * Open/Close the content assistant at the current position in the editor by sending the default
     * keyboard shortcut signal
     * @param open true to open, false to close
     * @returns Promise resolving to ContentAssist object when opening, void otherwise
     */
    async toggleContentAssist(open) {
        let isHidden = true;
        try {
            const assist = await this.elem.$(this.locatorMap.ContentAssist.elem);
            const klass = await assist.getAttribute('class');
            const visibility = await assist.getCSSProperty('visibility');
            isHidden = klass.indexOf('visible') < 0 || visibility.value === 'hidden';
        }
        catch (err) {
            isHidden = true;
        }
        if (open) {
            if (isHidden) {
                await browser.action('key')
                    .down(CMD_KEY).down(Key.Space)
                    .up(CMD_KEY).up(Key.Space)
                    .perform();
                await browser.$(this.locatorMap.ContentAssist.elem)
                    .waitForExist({ timeout: 2000 });
            }
            const assist = await new ContentAssist(this.locatorMap, this).wait();
            await browser.waitUntil(() => assist.isLoaded(), { timeout: 10000 });
            return assist;
        }
        if (!isHidden) {
            await browser.action('key')
                .down(Key.Escape).up(Key.Escape)
                .perform();
        }
        return undefined;
    }
    /**
     * Get all text from the editor
     * @returns Promise resolving to editor text
     */
    async getText() {
        await browser.action('key')
            .down(CMD_KEY).down('a').down('c')
            .pause(10)
            .up(CMD_KEY).up('a').up('c')
            .perform();
        const text = clipboard.readSync();
        await browser.action('key')
            .down(Key.ArrowUp).up(Key.ArrowUp)
            .perform();
        clipboard.writeSync('');
        /**
         * let's return "" if the editor is empty rather than "\n"
         */
        return text.trim().length === 0
            ? ''
            : text;
    }
    /**
     * Replace the contents of the editor with a given text
     * @param text text to type into the editor
     * @param formatText format the new text, default false
     * @returns Promise resolving once the new text is copied over
     */
    async setText(text, formatText = false) {
        clipboard.writeSync(text);
        await browser.action('key')
            .down(CMD_KEY).down('a').down('v')
            .pause(10)
            .up(CMD_KEY).up('a').up('v')
            .perform();
        clipboard.writeSync('');
        if (formatText) {
            await this.formatDocument();
        }
    }
    /**
     * Deletes all text within the editor
     * @returns Promise resolving once the text is deleted
     */
    async clearText() {
        await browser.action('key')
            .down(CMD_KEY).down('a').down(Key.Backspace)
            .pause(10)
            .up(CMD_KEY).up('a').up(Key.Backspace)
            .perform();
    }
    /**
     * Get text from a given line
     * @param line number of the line to retrieve
     * @returns Promise resolving to text at the given line number
     */
    async getTextAtLine(line) {
        const text = await this.getText();
        const lines = text.split('\n');
        if (line < 1 || line > lines.length) {
            throw new Error(`Line number ${line} does not exist`);
        }
        return lines[line - 1].trim();
    }
    /**
     * Replace the contents of a line with a given text
     * @param line number of the line to edit
     * @param text text to set at the line
     * @returns Promise resolving when the text is typed in
     */
    async setTextAtLine(line, text) {
        if (line < 1 || line > await this.getNumberOfLines()) {
            throw new Error(`Line number ${line} does not exist`);
        }
        const lines = (await this.getText()).split('\n');
        lines[line - 1] = text;
        await this.setText(lines.join('\n'));
    }
    /**
     * Get line number that contains the given text. Not suitable for multi line inputs.
     *
     * @param text text to search for
     * @param occurrence select which occurrence of the search text to look for in case
     *                   there are multiple in the document, defaults to 1 (the first instance)
     *
     * @returns Number of the line that contains the start of the given text. -1 if no such text is found.
     * If occurrence number is specified, searches until it finds as many instances of the given text.
     * Returns the line number that holds the last occurrence found this way.
     */
    async getLineOfText(text, occurrence = 1) {
        let lineNum = -1;
        let found = 0;
        const lines = (await this.getText()).split('\n');
        for (let i = 0; i < lines.length; i += 1) {
            if (lines[i].includes(text)) {
                found += 1;
                lineNum = i + 1;
                if (found >= occurrence) {
                    break;
                }
            }
        }
        return lineNum;
    }
    /**
     * Find and select a given text. Not usable for multi line selection.
     *
     * @param text text to select
     * @param occurrence specify which onccurrence of text to select if multiple are present in the document
     */
    async selectText(text, occurrence = 1) {
        const lineNum = await this.getLineOfText(text, occurrence);
        if (lineNum < 1) {
            throw new Error(`Text '${text}' not found`);
        }
        const line = await this.getTextAtLine(lineNum);
        const column = line.indexOf(text) + 1;
        await this.moveCursor(lineNum, column);
        await browser.action('key')
            .down(CMD_KEY).down(Key.Shift).down(Key.ArrowRight)
            .pause(10)
            .up(CMD_KEY).up(Key.Shift).up(Key.ArrowRight)
            .perform();
    }
    /**
     * Get the text that is currently selected as string
     */
    async getSelectedText() {
        await browser.action('key')
            .down(CMD_KEY).down('c')
            .up(CMD_KEY).up('c')
            .perform();
        return clipboard.read();
    }
    /**
     * Get the selection block as a page object
     * @returns Selection page object
     */
    async getSelection() {
        const selection = await this.selection$$;
        if (selection.length < 1) {
            return undefined;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return new Selection(this.locatorMap, selection[0], this);
    }
    async openFindWidget() {
        await browser.keys([CMD_KEY, 'f']);
        const widget = await browser.$(this.locators.findWidget);
        await widget.waitForDisplayed({ timeout: 2000 });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return new FindWidget(this.locatorMap, widget, this);
    }
    /**
     * Add the given text to the given coordinates
     * @param line number of the line to type into
     * @param column number of the column to start typing at
     * @param text text to add
     * @returns Promise resolving when the text is typed in
     */
    async typeTextAt(line, column, text) {
        await this.moveCursor(line, column);
        const inputarea = await this.elem.$(this.locatorMap.Editor.inputArea);
        await inputarea.addValue(text);
    }
    /**
     * Type given text at the current coordinates
     * @param text text to type
     * @returns promise resolving when the text is typed in
     */
    async typeText(text) {
        const inputarea = await this.elem.$(this.locatorMap.Editor.inputArea);
        await inputarea.addValue(text);
    }
    /**
     * Move the cursor to the given coordinates
     * @param line line number to move to
     * @param column column number to move to
     * @returns Promise resolving when the cursor has reached the given coordinates
     */
    async moveCursor(line, column) {
        if (line < 1 || line > await this.getNumberOfLines()) {
            throw new Error(`Line number ${line} does not exist`);
        }
        if (column < 1) {
            throw new Error(`Column number ${column} does not exist`);
        }
        let coordinates = await this.getCoordinates();
        const lineGap = coordinates[0] - line;
        const lineKey = lineGap >= 0 ? Key.ArrowUp : Key.ArrowDown;
        for (let i = 0; i < Math.abs(lineGap); i += 1) {
            await browser.action('key')
                .down(lineKey).pause(10).up(lineKey)
                .perform();
            // eslint-disable-next-line wdio/no-pause
            await browser.pause(50);
        }
        // eslint-disable-next-line wdio/no-pause
        await browser.pause(100);
        coordinates = await this.getCoordinates();
        const columnGap = coordinates[1] - column;
        const columnKey = columnGap >= 0 ? Key.ArrowLeft : Key.ArrowRight;
        for (let i = 0; i < Math.abs(columnGap); i += 1) {
            await browser.action('key')
                .down(columnKey).pause(10).up(columnKey)
                .perform();
            // eslint-disable-next-line wdio/no-pause
            await browser.pause(50);
            if ((await this.getCoordinates())[0] !== coordinates[0]) {
                throw new Error(`Column number ${column} is not accessible on line ${line}`);
            }
        }
    }
    /**
     * Get number of lines in the editor
     * @returns Promise resolving to number of lines
     */
    async getNumberOfLines() {
        const lines = (await this.getText()).split('\n');
        return lines.length;
    }
    /**
     * Use the built-in 'Format Document' option to format the text
     * @returns Promise resolving when the Format Document command is invoked
     */
    async formatDocument() {
        const menu = await this.openContextMenu();
        try {
            await menu.select('Format Document');
        }
        catch (err) {
            console.log('Warn: Format Document not available for selected language');
            if (await menu.elem.isDisplayed()) {
                await menu.close();
            }
        }
    }
    async openContextMenu() {
        await this.elem.click({ button: 2 });
        const shadowRootHost = await this.view.elem.$$('.shadow-root-host');
        if (shadowRootHost.length > 0) {
            const shadowRoot = $(await browser.execute('return arguments[0].shadowRoot', shadowRootHost[0]));
            return new ContextMenu(this.locatorMap, shadowRoot).wait();
        }
        return super.openContextMenu();
    }
    /**
     * Get the cursor's coordinates as an array of two numbers: `[line, column]`
     *
     * **Caution** line & column coordinates do not start at `0` but at `1`!
     */
    async getCoordinates() {
        const coords = [];
        const statusBar = new StatusBar(this.locatorMap);
        const coordinates = (await statusBar.getCurrentPosition()).match(/\d+/g);
        for (const c of coordinates) {
            coords.push(+c);
        }
        return [coords[0], coords[1]];
    }
    /**
     * Toggle breakpoint on a given line
     *
     * @param line target line number
     * @returns promise resolving to true when a breakpoint was added, false when removed or
     */
    async toggleBreakpoint(line) {
        const margin = await this.marginArea$;
        const lineNum = await margin.$(this.locators.lineNumber(line));
        await lineNum.moveTo();
        const lineOverlay = await margin.$(this.locators.lineOverlay(line));
        const breakPoint = await lineOverlay.$$(this.locators.breakPoint);
        if (breakPoint.length > 0) {
            await breakPoint[0].click();
            // eslint-disable-next-line wdio/no-pause
            await browser.pause(200);
            return false;
        }
        const noBreak = await lineOverlay.$$(this.locators.debugHint);
        if (noBreak.length > 0) {
            await noBreak[0].click();
            // eslint-disable-next-line wdio/no-pause
            await browser.pause(200);
            return true;
        }
        return false;
    }
    /**
     * Get all code lenses within the editor
     * @returns list of CodeLens page objects
     */
    async getCodeLenses() {
        const lenses = [];
        const widgets = await this.elem.$('.contentWidgets');
        const items = await widgets.$$('.//span[contains(@widgetid, \'codelens.widget\')]');
        for (const item of items) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            lenses.push(await new CodeLens(this.locatorMap, item, this).wait());
        }
        return lenses;
    }
    /**
     * Get a code lens based on title, or zero based index
     *
     * @param indexOrTitle zero based index (counting from the top of the editor), or partial title of the code lens
     * @returns CodeLens object if such a code lens exists, undefined otherwise
     */
    async getCodeLens(indexOrTitle) {
        const lenses = await this.getCodeLenses();
        if (typeof indexOrTitle === 'string') {
            for (const lens of lenses) {
                const title = await lens.getText();
                const match = title.match(indexOrTitle);
                if (match && match.length > 0) {
                    return lens;
                }
            }
        }
        else if (lenses[indexOrTitle]) {
            return lenses[indexOrTitle];
        }
        return undefined;
    }
};
TextEditor = __decorate([
    PageDecorator(TextEditorLocators)
], TextEditor);
export { TextEditor };
/**
 * Text selection block
 *
 * @category Editor
 */
let Selection = class Selection extends ElementWithContextMenu {
    constructor(locators, element, editor) {
        super(locators, element);
        this.editor = editor;
        /**
         * @private
         */
        this.locatorKey = 'TextEditor';
    }
    async openContextMenu() {
        await this.elem.click({ button: 2 });
        const shadowRootHost = await this.editor.view.elem.$$('.shadow-root-host');
        if (shadowRootHost.length > 0) {
            const shadowRoot = $(await browser.execute('return arguments[0].shadowRoot', shadowRootHost[0]));
            return new ContextMenu(this.locatorMap, shadowRoot).wait();
        }
        return super.openContextMenu();
    }
};
Selection = __decorate([
    PageDecorator(TextEditorLocators)
], Selection);
/**
 * Page object for Code Lens inside a text editor
 *
 * @category Editor
 */
let CodeLens = class CodeLens extends BasePage {
    constructor(locators, element, editor) {
        super(locators, element);
        this.editor = editor;
        /**
         * @private
         */
        this.locatorKey = 'TextEditor';
    }
    /**
     * Get the text displayed on the code lens
     * @returns text as string
     */
    async getText() {
        const link = await this.elem.$('a');
        return link.getText();
    }
    /**
     * Get tooltip of the code lens
     * @returns tooltip as string
     */
    async getTooltip() {
        const link = await this.elem.$('a');
        return link.getAttribute('title');
    }
};
CodeLens = __decorate([
    PageDecorator(TextEditorLocators)
], CodeLens);
export { CodeLens };
/**
 * Text Editor's Find Widget
 *
 * @category Editor
 */
let FindWidget = class FindWidget extends BasePage {
    constructor(locators, element, textEditor) {
        super(locators, element);
        this.textEditor = textEditor;
        /**
         * @private
         */
        this.locatorKey = 'FindWidget';
    }
    /**
     * Toggle between find and replace mode
     * @param replace true for replace, false for find
     */
    async toggleReplace(replace) {
        const btn = await this.toggleReplace$;
        const klass = await btn.getAttribute('class');
        if ((replace && klass.includes('collapsed')) || (!replace && !klass.includes('collapsed'))) {
            await btn.addValue(' ');
            const repl = await browser.$(this.locators.replacePart);
            await repl.waitForExist({ timeout: 2000 });
            if (replace) {
                await repl.waitForDisplayed({ timeout: 2000 });
            }
            else {
                await repl.waitForDisplayed({ timeout: 2000, reverse: true });
            }
        }
    }
    /**
     * Set text in the search box
     * @param text text to fill in
     */
    async setSearchText(text) {
        await browser.keys([CMD_KEY, 'f']);
        await browser.keys(text);
    }
    /**
     * Get text from Find input box
     * @returns value of find input as string
     */
    async getSearchText() {
        const findPart = await this.findPart$;
        return this.getInputText(findPart);
    }
    /**
     * Set text in the replace box. Will toggle replace mode on if called in find mode.
     * @param text text to fill in
     */
    async setReplaceText(text) {
        await this.toggleReplace(true);
        const replacePart = await this.replacePart$;
        await this.setText(text, replacePart);
    }
    /**
     * Get text from Replace input box
     * @returns value of replace input as string
     */
    async getReplaceText() {
        const replacePart = await this.replacePart$;
        return this.getInputText(replacePart);
    }
    /**
     * Click 'Next match'
     */
    async nextMatch() {
        const name = (await browser.getVSCodeVersion()) < '1.59.0' ? 'Next match' : 'Next Match';
        await this.clickButton(name, 'find');
    }
    /**
     * Click 'Previous match'
     */
    async previousMatch() {
        const name = (await browser.getVSCodeVersion()) < '1.59.0' ? 'Previous match' : 'Previous Match';
        await this.clickButton(name, 'find');
    }
    /**
     * Click 'Replace'. Only works in replace mode.
     */
    async replace() {
        await this.clickButton('Replace', 'replace');
    }
    /**
     * Click 'Replace All'. Only works in replace mode.
     */
    async replaceAll() {
        await this.clickButton('Replace All', 'replace');
    }
    /**
     * Close the widget.
     */
    async close() {
        await this.clickButton('Close', 'find');
    }
    /**
     * Get the number of results as an ordered pair of numbers
     * @returns pair in form of [current result index, total number of results]
     */
    async getResultCount() {
        const count = await this.matchCount$;
        const text = await count.getText();
        if (text.includes('No results')) {
            return [0, 0];
        }
        const numbers = text.split(' of ');
        return [+numbers[0], +numbers[1]];
    }
    /**
     * Toggle the search to match case
     * @param toggle true to turn on, false to turn off
     */
    async toggleMatchCase(toggle) {
        await this.toggleControl('Match Case', 'find', toggle);
    }
    /**
     * Toggle the search to match whole words
     * @param toggle true to turn on, false to turn off
     */
    async toggleMatchWholeWord(toggle) {
        await this.toggleControl('Match Whole Word', 'find', toggle);
    }
    /**
     * Toggle the search to use regular expressions
     * @param toggle true to turn on, false to turn off
     */
    async toggleUseRegularExpression(toggle) {
        await this.toggleControl('Use Regular Expression', 'find', toggle);
    }
    /**
     * Toggle the replace to preserve case
     * @param toggle true to turn on, false to turn off
     */
    async togglePreserveCase(toggle) {
        await this.toggleControl('Preserve Case', 'replace', toggle);
    }
    async toggleControl(title, part, toggle) {
        if (part !== 'find' && part !== 'replace') {
            throw new Error('"part" parameter needs to be "find" or "replace"');
        }
        const element = part === 'find'
            ? await this.findPart$
            : await this.replacePart$;
        if (part === 'replace') {
            await this.toggleReplace(true);
        }
        const control = await element.$(this.locators.checkbox(title));
        const checked = await control.getAttribute('aria-checked');
        if ((toggle && checked !== 'true') || (!toggle && checked === 'true')) {
            await control.click();
        }
    }
    async clickButton(title, part) {
        if (part !== 'find' && part !== 'replace') {
            throw new Error('"part" parameter needs to be "find" or "replace"');
        }
        const element = part === 'find'
            ? await this.findPart$
            : await this.replacePart$;
        if (part === 'replace') {
            await this.toggleReplace(true);
        }
        const btn = await element.$(this.locators.button(title));
        await btn.click();
        // eslint-disable-next-line wdio/no-pause
        await browser.pause(100);
    }
    async setText(text, composite) {
        const input = await composite.$(this.locators.input);
        await input.setValue(text);
    }
    async getInputText(composite) {
        const input = await composite.$(this.locators.content);
        return input.getHTML(false);
    }
};
FindWidget = __decorate([
    PageDecorator(FindWidgetLocators)
], FindWidget);
export { FindWidget };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9lZGl0b3IvVGV4dEVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3hDLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUEyQixNQUFNLGFBQWEsQ0FBQTtBQUUxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBRXBELE9BQU8sRUFDSCxhQUFhLEVBQWtCLFFBQVEsRUFBRSxzQkFBc0IsRUFDbEUsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUNILFVBQVUsSUFBSSxrQkFBa0IsRUFDaEMsVUFBVSxJQUFJLGtCQUFrQixFQUNuQyxNQUFNLDBCQUEwQixDQUFBO0FBQ2pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUc1Qzs7OztHQUlHO0FBRUgsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVyxTQUFRLE1BQXNCO0lBQXREOztRQUNJOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUE2YjdDLENBQUM7SUEzYkc7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLE9BQU87UUFDVCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2hGLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxJQUFJO1FBQ04sTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUN2QixLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ1QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDbkIsT0FBTyxFQUFFLENBQUE7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsTUFBTTtRQUNSLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUN2QyxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ1QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUNuQyxPQUFPLEVBQUUsQ0FBQTtRQUNkLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBYyxDQUFDLENBQUE7UUFDbkUsTUFBTSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFDOUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsVUFBVTtRQUNaLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFBO1FBQ3RDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsV0FBVztRQUNiLE9BQU8sYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLG1CQUFtQixDQUFFLElBQWE7UUFDcEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUk7WUFDQSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQWMsQ0FBQyxDQUFBO1lBQzlFLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNoRCxNQUFNLFVBQVUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDNUQsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFBO1NBQzNFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixRQUFRLEdBQUcsSUFBSSxDQUFBO1NBQ2xCO1FBQ0QsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLFFBQVEsRUFBRTtnQkFDVixNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO3FCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7cUJBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztxQkFDekIsT0FBTyxFQUFFLENBQUE7Z0JBQ2QsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQWMsQ0FBQztxQkFDeEQsWUFBWSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7YUFDdkM7WUFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDcEUsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQ3BFLE9BQU8sTUFBTSxDQUFBO1NBQ2hCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7aUJBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7aUJBQy9CLE9BQU8sRUFBRSxDQUFBO1NBQ2pCO1FBQ0QsT0FBTyxTQUFTLENBQUE7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDakMsS0FBSyxDQUFDLEVBQUUsQ0FBQzthQUNULEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUMzQixPQUFPLEVBQUUsQ0FBQTtRQUNkLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7YUFDakMsT0FBTyxFQUFFLENBQUE7UUFDZCxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRXZCOztXQUVHO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDM0IsQ0FBQyxDQUFDLEVBQUU7WUFDSixDQUFDLENBQUMsSUFBSSxDQUFBO0lBQ2QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFZLEVBQUUsVUFBVSxHQUFHLEtBQUs7UUFDM0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN6QixNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUNqQyxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ1QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQzNCLE9BQU8sRUFBRSxDQUFBO1FBQ2QsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN2QixJQUFJLFVBQVUsRUFBRTtZQUNaLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxTQUFTO1FBQ1gsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO2FBQzNDLEtBQUssQ0FBQyxFQUFFLENBQUM7YUFDVCxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO2FBQ3JDLE9BQU8sRUFBRSxDQUFBO0lBQ2xCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBRSxJQUFZO1FBQzdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxJQUFJLGlCQUFpQixDQUFDLENBQUE7U0FDeEQ7UUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBRSxJQUFZLEVBQUUsSUFBWTtRQUMzQyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLElBQUksaUJBQWlCLENBQUMsQ0FBQTtTQUN4RDtRQUNELE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEQsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDdEIsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUUsSUFBWSxFQUFFLFVBQVUsR0FBRyxDQUFDO1FBQzdDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2hCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFaEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3pCLEtBQUssSUFBSSxDQUFDLENBQUE7Z0JBQ1YsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ2YsSUFBSSxLQUFLLElBQUksVUFBVSxFQUFFO29CQUNyQixNQUFLO2lCQUNSO2FBQ0o7U0FDSjtRQUNELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUUsSUFBWSxFQUFFLFVBQVUsR0FBRyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDMUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksYUFBYSxDQUFDLENBQUE7U0FDOUM7UUFFRCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFckMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUV0QyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO2FBQ2xELEtBQUssQ0FBQyxFQUFFLENBQUM7YUFDVCxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQzthQUM1QyxPQUFPLEVBQUUsQ0FBQTtJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsZUFBZTtRQUNqQixNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ3ZCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ25CLE9BQU8sRUFBRSxDQUFBO1FBQ2QsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxZQUFZO1FBQ2QsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFBO1FBQ3hDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxTQUFTLENBQUE7U0FDbkI7UUFDRCxpRUFBaUU7UUFDakUsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDaEIsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDeEQsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUVoRCxpRUFBaUU7UUFDakUsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLFVBQVUsQ0FBRSxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7UUFDeEQsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNuQyxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQW1CLENBQUMsQ0FBQTtRQUMvRSxNQUFNLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFFLElBQVk7UUFDeEIsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFtQixDQUFDLENBQUE7UUFDL0UsTUFBTSxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUUsSUFBWSxFQUFFLE1BQWM7UUFDMUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxJQUFJLGlCQUFpQixDQUFDLENBQUE7U0FDeEQ7UUFDRCxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixNQUFNLGlCQUFpQixDQUFDLENBQUE7U0FDNUQ7UUFDRCxJQUFJLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUM3QyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUE7UUFDMUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2lCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUM7aUJBQ25DLE9BQU8sRUFBRSxDQUFBO1lBQ2QseUNBQXlDO1lBQ3pDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUMxQjtRQUVELHlDQUF5QztRQUN6QyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDeEIsV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUE7UUFDekMsTUFBTSxTQUFTLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQTtRQUNqRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdDLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7aUJBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztpQkFDdkMsT0FBTyxFQUFFLENBQUE7WUFDZCx5Q0FBeUM7WUFDekMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsTUFBTSw4QkFBOEIsSUFBSSxFQUFFLENBQUMsQ0FBQTthQUMvRTtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxnQkFBZ0I7UUFDbEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNoRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxjQUFjO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO1FBQ3pDLElBQUk7WUFDQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtTQUN2QztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQywyREFBMkQsQ0FBQyxDQUFBO1lBQ3hFLElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUMvQixNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNwQyxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBRW5FLElBQUksY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2hHLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtTQUM3RDtRQUNELE9BQU8sS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGNBQWM7UUFDaEIsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFBO1FBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNoRCxNQUFNLFdBQVcsR0FBcUIsQ0FBQyxNQUFNLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzFGLEtBQUssTUFBTSxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNsQjtRQUNELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUFFLElBQVk7UUFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFBO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzlELE1BQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRXRCLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sVUFBVSxHQUFHLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2pFLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDM0IseUNBQXlDO1lBQ3pDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN4QixPQUFPLEtBQUssQ0FBQTtTQUNmO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDN0QsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUN4Qix5Q0FBeUM7WUFDekMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7UUFDRCxPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGFBQWE7UUFDZixNQUFNLE1BQU0sR0FBZSxFQUFFLENBQUE7UUFDN0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3BELE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEVBQUUsQ0FBQyxtREFBbUQsQ0FBQyxDQUFBO1FBRW5GLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3RCLGlFQUFpRTtZQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtTQUM3RTtRQUNELE9BQU8sTUFBTSxDQUFBO0lBQ2pCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUUsWUFBNkI7UUFDNUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7UUFFekMsSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLEVBQUU7WUFDbEMsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7Z0JBQ3ZCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUNsQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUN2QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDM0IsT0FBTyxJQUFJLENBQUE7aUJBQ2Q7YUFDSjtTQUNKO2FBQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0IsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDOUI7UUFDRCxPQUFPLFNBQVMsQ0FBQTtJQUNwQixDQUFDO0NBQ0osQ0FBQTtBQWpjWSxVQUFVO0lBRHRCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztHQUNyQixVQUFVLENBaWN0QjtTQWpjWSxVQUFVO0FBb2N2Qjs7OztHQUlHO0FBRUgsSUFBTSxTQUFTLEdBQWYsTUFBTSxTQUFVLFNBQVEsc0JBQWlEO0lBTXJFLFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDOUMsTUFBa0I7UUFFekIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUZqQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBUjdCOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUFRekMsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNwQyxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUUxRSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNoRyxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDN0Q7UUFDRCxPQUFPLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUNsQyxDQUFDO0NBQ0osQ0FBQTtBQXhCSyxTQUFTO0lBRGQsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0dBQzVCLFNBQVMsQ0F3QmQ7QUFHRDs7OztHQUlHO0FBRUgsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUyxTQUFRLFFBQW1DO0lBTTdELFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDOUMsTUFBa0I7UUFFekIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUZqQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBUjdCOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUFRekMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNuQyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN6QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDWixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0NBQ0osQ0FBQTtBQS9CWSxRQUFRO0lBRHBCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztHQUNyQixRQUFRLENBK0JwQjtTQS9CWSxRQUFRO0FBa0NyQjs7OztHQUlHO0FBRUgsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVyxTQUFRLFFBQW1DO0lBTS9ELFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDOUMsVUFBc0I7UUFFN0IsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUZqQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBUmpDOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUFRekMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUUsT0FBZ0I7UUFDakMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFBO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUU3QyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQ3hGLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN2QixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUN2RCxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUMxQyxJQUFJLE9BQU8sRUFBRTtnQkFDVCxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2FBQ2pEO2lCQUFNO2dCQUNILE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTthQUNoRTtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUUsSUFBWTtRQUM3QixNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUNsQyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFhO1FBQ2YsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGNBQWMsQ0FBRSxJQUFZO1FBQzlCLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUE7UUFDM0MsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGNBQWM7UUFDaEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFBO1FBQzNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsU0FBUztRQUNYLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUE7UUFDeEYsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsYUFBYTtRQUNmLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFBO1FBQ2hHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE9BQU87UUFDVCxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsS0FBSztRQUNQLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxjQUFjO1FBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUNwQyxNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVsQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0IsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUNoQjtRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbEMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQUUsTUFBZTtRQUNsQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLG9CQUFvQixDQUFFLE1BQWU7UUFDdkMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLDBCQUEwQixDQUFFLE1BQWU7UUFDN0MsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGtCQUFrQixDQUFFLE1BQWU7UUFDckMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDaEUsQ0FBQztJQUVPLEtBQUssQ0FBQyxhQUFhLENBQUUsS0FBYSxFQUFFLElBQXdCLEVBQUUsTUFBZTtRQUNqRixJQUFJLElBQUksS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUE7U0FDdEU7UUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssTUFBTTtZQUMzQixDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUztZQUN0QixDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFBO1FBRTdCLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUNwQixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDakM7UUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUM5RCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDMUQsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxPQUFPLEtBQUssTUFBTSxDQUFDLEVBQUU7WUFDbkUsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7U0FDeEI7SUFDTCxDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FBRSxLQUFhLEVBQUUsSUFBd0I7UUFDOUQsSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFBO1NBQ3RFO1FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLE1BQU07WUFDM0IsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLFNBQVM7WUFDdEIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQTtRQUU3QixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDcEIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFDeEQsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDakIseUNBQXlDO1FBQ3pDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRU8sS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFZLEVBQUUsU0FBOEI7UUFDL0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEQsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzlCLENBQUM7SUFFTyxLQUFLLENBQUMsWUFBWSxDQUFFLFNBQThCO1FBQ3RELE1BQU0sS0FBSyxHQUFHLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3RELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMvQixDQUFDO0NBQ0osQ0FBQTtBQTNNWSxVQUFVO0lBRHRCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztHQUNyQixVQUFVLENBMk10QjtTQTNNWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJ1xuaW1wb3J0IGNsaXBib2FyZCBmcm9tICdjbGlwYm9hcmR5J1xuaW1wb3J0IHsgS2V5LCBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBDb250ZW50QXNzaXN0LCBDb250ZXh0TWVudSwgSW5wdXRCb3ggfSBmcm9tICcuLi9pbmRleC5qcydcbmltcG9ydCB7IFN0YXR1c0JhciB9IGZyb20gJy4uL3N0YXR1c0Jhci9TdGF0dXNCYXIuanMnXG5pbXBvcnQgeyBFZGl0b3IsIEVkaXRvckxvY2F0b3JzIH0gZnJvbSAnLi9FZGl0b3IuanMnXG5cbmltcG9ydCB7XG4gICAgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIEJhc2VQYWdlLCBFbGVtZW50V2l0aENvbnRleHRNZW51LCBWU0NvZGVMb2NhdG9yTWFwXG59IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBUZXh0RWRpdG9yIGFzIFRleHRFZGl0b3JMb2NhdG9ycyxcbiAgICBGaW5kV2lkZ2V0IGFzIEZpbmRXaWRnZXRMb2NhdG9yc1xufSBmcm9tICcuLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5pbXBvcnQgeyBDTURfS0VZIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRFZGl0b3IgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxFZGl0b3JMb2NhdG9ycz4ge31cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBhY3RpdmUgdGV4dCBlZGl0b3JcbiAqXG4gKiBAY2F0ZWdvcnkgRWRpdG9yXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFRleHRFZGl0b3JMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBUZXh0RWRpdG9yIGV4dGVuZHMgRWRpdG9yPEVkaXRvckxvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdUZXh0RWRpdG9yJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogRmluZCB3aGV0aGVyIHRoZSBhY3RpdmUgZWRpdG9yIGhhcyB1bnNhdmVkIGNoYW5nZXNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0cnVlL2ZhbHNlXG4gICAgICovXG4gICAgYXN5bmMgaXNEaXJ0eSAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGtsYXNzID0gYXdhaXQgdGhpcy5wYXJlbnQuJCh0aGlzLmxvY2F0b3JzLmFjdGl2ZVRhYikuZ2V0QXR0cmlidXRlKCdjbGFzcycpXG4gICAgICAgIHJldHVybiBrbGFzcy5pbmRleE9mKCdkaXJ0eScpID49IDBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYXZlcyB0aGUgYWN0aXZlIGVkaXRvclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gY3RybCtzIGlzIGludm9rZWRcbiAgICAgKi9cbiAgICBhc3luYyBzYXZlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKCdzJylcbiAgICAgICAgICAgIC5wYXVzZSgxMClcbiAgICAgICAgICAgIC51cChDTURfS0VZKS51cCgncycpXG4gICAgICAgICAgICAucGVyZm9ybSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgU2F2ZSBhcyBwcm9tcHRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIElucHV0Qm94IHNlcnZpbmcgYXMgYSBzaW1wbGUgZmlsZSBkaWFsb2dcbiAgICAgKi9cbiAgICBhc3luYyBzYXZlQXMgKCk6IFByb21pc2U8SW5wdXRCb3g+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKEtleS5TaGlmdCkuZG93bigncycpXG4gICAgICAgICAgICAucGF1c2UoMTApXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkuZG93bihLZXkuU2hpZnQpLnVwKCdzJylcbiAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgY29uc3QgaW5wdXRCb3ggPSBicm93c2VyLiQodGhpcy5sb2NhdG9yTWFwLklucHV0Qm94LmVsZW0gYXMgc3RyaW5nKVxuICAgICAgICBhd2FpdCBpbnB1dEJveC53YWl0Rm9yRXhpc3QoeyB0aW1lb3V0OiA1MDAwIH0pXG4gICAgICAgIHJldHVybiBuZXcgSW5wdXRCb3godGhpcy5sb2NhdG9yTWFwLCBpbnB1dEJveClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgVXJpIG9mIHRoZSBmaWxlIG9wZW5lZCBpbiB0aGUgYWN0aXZlIGVkaXRvclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGVkaXRvcidzIHVuZGVybHlpbmcgVXJpXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RmlsZVVyaSAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZWQgPSBhd2FpdCB0aGlzLmVkaXRvckNvbnRhaW5lciRcbiAgICAgICAgcmV0dXJuIGVkLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmRhdGFVcmkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHBhdGggdG8gdGhlIGZpbGUgb3BlbmVkIGluIHRoZSBhY3RpdmUgZWRpdG9yXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gZWRpdG9yJ3MgdW5kZXJseWluZyBmaWxlIHBhdGhcbiAgICAgKi9cbiAgICBhc3luYyBnZXRGaWxlUGF0aCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGZpbGVVUkxUb1BhdGgoYXdhaXQgdGhpcy5nZXRGaWxlVXJpKCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3Blbi9DbG9zZSB0aGUgY29udGVudCBhc3Npc3RhbnQgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIGVkaXRvciBieSBzZW5kaW5nIHRoZSBkZWZhdWx0XG4gICAgICoga2V5Ym9hcmQgc2hvcnRjdXQgc2lnbmFsXG4gICAgICogQHBhcmFtIG9wZW4gdHJ1ZSB0byBvcGVuLCBmYWxzZSB0byBjbG9zZVxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIENvbnRlbnRBc3Npc3Qgb2JqZWN0IHdoZW4gb3BlbmluZywgdm9pZCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBhc3luYyB0b2dnbGVDb250ZW50QXNzaXN0IChvcGVuOiBib29sZWFuKTogUHJvbWlzZTxDb250ZW50QXNzaXN0IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGxldCBpc0hpZGRlbiA9IHRydWVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGFzc2lzdCA9IGF3YWl0IHRoaXMuZWxlbS4kKHRoaXMubG9jYXRvck1hcC5Db250ZW50QXNzaXN0LmVsZW0gYXMgc3RyaW5nKVxuICAgICAgICAgICAgY29uc3Qga2xhc3MgPSBhd2FpdCBhc3Npc3QuZ2V0QXR0cmlidXRlKCdjbGFzcycpXG4gICAgICAgICAgICBjb25zdCB2aXNpYmlsaXR5ID0gYXdhaXQgYXNzaXN0LmdldENTU1Byb3BlcnR5KCd2aXNpYmlsaXR5JylcbiAgICAgICAgICAgIGlzSGlkZGVuID0ga2xhc3MuaW5kZXhPZigndmlzaWJsZScpIDwgMCB8fCB2aXNpYmlsaXR5LnZhbHVlID09PSAnaGlkZGVuJ1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlzSGlkZGVuID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgICAgICAgICAgLmRvd24oQ01EX0tFWSkuZG93bihLZXkuU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIC51cChDTURfS0VZKS51cChLZXkuU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyLiQodGhpcy5sb2NhdG9yTWFwLkNvbnRlbnRBc3Npc3QuZWxlbSBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgIC53YWl0Rm9yRXhpc3QoeyB0aW1lb3V0OiAyMDAwIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhc3Npc3QgPSBhd2FpdCBuZXcgQ29udGVudEFzc2lzdCh0aGlzLmxvY2F0b3JNYXAsIHRoaXMpLndhaXQoKVxuICAgICAgICAgICAgYXdhaXQgYnJvd3Nlci53YWl0VW50aWwoKCkgPT4gYXNzaXN0LmlzTG9hZGVkKCksIHsgdGltZW91dDogMTAwMDAgfSlcbiAgICAgICAgICAgIHJldHVybiBhc3Npc3RcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzSGlkZGVuKSB7XG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgICAgICAuZG93bihLZXkuRXNjYXBlKS51cChLZXkuRXNjYXBlKVxuICAgICAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0ZXh0IGZyb20gdGhlIGVkaXRvclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGVkaXRvciB0ZXh0XG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGV4dCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKCdhJykuZG93bignYycpXG4gICAgICAgICAgICAucGF1c2UoMTApXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkudXAoJ2EnKS51cCgnYycpXG4gICAgICAgICAgICAucGVyZm9ybSgpXG4gICAgICAgIGNvbnN0IHRleHQgPSBjbGlwYm9hcmQucmVhZFN5bmMoKVxuICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgIC5kb3duKEtleS5BcnJvd1VwKS51cChLZXkuQXJyb3dVcClcbiAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgY2xpcGJvYXJkLndyaXRlU3luYygnJylcblxuICAgICAgICAvKipcbiAgICAgICAgICogbGV0J3MgcmV0dXJuIFwiXCIgaWYgdGhlIGVkaXRvciBpcyBlbXB0eSByYXRoZXIgdGhhbiBcIlxcblwiXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGV4dC50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IHRleHRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZWRpdG9yIHdpdGggYSBnaXZlbiB0ZXh0XG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byB0eXBlIGludG8gdGhlIGVkaXRvclxuICAgICAqIEBwYXJhbSBmb3JtYXRUZXh0IGZvcm1hdCB0aGUgbmV3IHRleHQsIGRlZmF1bHQgZmFsc2VcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyBvbmNlIHRoZSBuZXcgdGV4dCBpcyBjb3BpZWQgb3ZlclxuICAgICAqL1xuICAgIGFzeW5jIHNldFRleHQgKHRleHQ6IHN0cmluZywgZm9ybWF0VGV4dCA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNsaXBib2FyZC53cml0ZVN5bmModGV4dClcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKCdhJykuZG93bigndicpXG4gICAgICAgICAgICAucGF1c2UoMTApXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkudXAoJ2EnKS51cCgndicpXG4gICAgICAgICAgICAucGVyZm9ybSgpXG4gICAgICAgIGNsaXBib2FyZC53cml0ZVN5bmMoJycpXG4gICAgICAgIGlmIChmb3JtYXRUZXh0KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZvcm1hdERvY3VtZW50KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYWxsIHRleHQgd2l0aGluIHRoZSBlZGl0b3JcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyBvbmNlIHRoZSB0ZXh0IGlzIGRlbGV0ZWRcbiAgICAgKi9cbiAgICBhc3luYyBjbGVhclRleHQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgIC5kb3duKENNRF9LRVkpLmRvd24oJ2EnKS5kb3duKEtleS5CYWNrc3BhY2UpXG4gICAgICAgICAgICAucGF1c2UoMTApXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkudXAoJ2EnKS51cChLZXkuQmFja3NwYWNlKVxuICAgICAgICAgICAgLnBlcmZvcm0oKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0ZXh0IGZyb20gYSBnaXZlbiBsaW5lXG4gICAgICogQHBhcmFtIGxpbmUgbnVtYmVyIG9mIHRoZSBsaW5lIHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdGV4dCBhdCB0aGUgZ2l2ZW4gbGluZSBudW1iZXJcbiAgICAgKi9cbiAgICBhc3luYyBnZXRUZXh0QXRMaW5lIChsaW5lOiBudW1iZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgdGhpcy5nZXRUZXh0KClcbiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKVxuICAgICAgICBpZiAobGluZSA8IDEgfHwgbGluZSA+IGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5lIG51bWJlciAke2xpbmV9IGRvZXMgbm90IGV4aXN0YClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZXNbbGluZSAtIDFdLnRyaW0oKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIGEgbGluZSB3aXRoIGEgZ2l2ZW4gdGV4dFxuICAgICAqIEBwYXJhbSBsaW5lIG51bWJlciBvZiB0aGUgbGluZSB0byBlZGl0XG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byBzZXQgYXQgdGhlIGxpbmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHRoZSB0ZXh0IGlzIHR5cGVkIGluXG4gICAgICovXG4gICAgYXN5bmMgc2V0VGV4dEF0TGluZSAobGluZTogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGxpbmUgPCAxIHx8IGxpbmUgPiBhd2FpdCB0aGlzLmdldE51bWJlck9mTGluZXMoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5lIG51bWJlciAke2xpbmV9IGRvZXMgbm90IGV4aXN0YClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lcyA9IChhd2FpdCB0aGlzLmdldFRleHQoKSkuc3BsaXQoJ1xcbicpXG4gICAgICAgIGxpbmVzW2xpbmUgLSAxXSA9IHRleHRcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRUZXh0KGxpbmVzLmpvaW4oJ1xcbicpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBsaW5lIG51bWJlciB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiB0ZXh0LiBOb3Qgc3VpdGFibGUgZm9yIG11bHRpIGxpbmUgaW5wdXRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIG9jY3VycmVuY2Ugc2VsZWN0IHdoaWNoIG9jY3VycmVuY2Ugb2YgdGhlIHNlYXJjaCB0ZXh0IHRvIGxvb2sgZm9yIGluIGNhc2VcbiAgICAgKiAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgbXVsdGlwbGUgaW4gdGhlIGRvY3VtZW50LCBkZWZhdWx0cyB0byAxICh0aGUgZmlyc3QgaW5zdGFuY2UpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBOdW1iZXIgb2YgdGhlIGxpbmUgdGhhdCBjb250YWlucyB0aGUgc3RhcnQgb2YgdGhlIGdpdmVuIHRleHQuIC0xIGlmIG5vIHN1Y2ggdGV4dCBpcyBmb3VuZC5cbiAgICAgKiBJZiBvY2N1cnJlbmNlIG51bWJlciBpcyBzcGVjaWZpZWQsIHNlYXJjaGVzIHVudGlsIGl0IGZpbmRzIGFzIG1hbnkgaW5zdGFuY2VzIG9mIHRoZSBnaXZlbiB0ZXh0LlxuICAgICAqIFJldHVybnMgdGhlIGxpbmUgbnVtYmVyIHRoYXQgaG9sZHMgdGhlIGxhc3Qgb2NjdXJyZW5jZSBmb3VuZCB0aGlzIHdheS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRMaW5lT2ZUZXh0ICh0ZXh0OiBzdHJpbmcsIG9jY3VycmVuY2UgPSAxKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgbGV0IGxpbmVOdW0gPSAtMVxuICAgICAgICBsZXQgZm91bmQgPSAwXG4gICAgICAgIGNvbnN0IGxpbmVzID0gKGF3YWl0IHRoaXMuZ2V0VGV4dCgpKS5zcGxpdCgnXFxuJylcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAobGluZXNbaV0uaW5jbHVkZXModGV4dCkpIHtcbiAgICAgICAgICAgICAgICBmb3VuZCArPSAxXG4gICAgICAgICAgICAgICAgbGluZU51bSA9IGkgKyAxXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kID49IG9jY3VycmVuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVOdW1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFuZCBzZWxlY3QgYSBnaXZlbiB0ZXh0LiBOb3QgdXNhYmxlIGZvciBtdWx0aSBsaW5lIHNlbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXh0IHRleHQgdG8gc2VsZWN0XG4gICAgICogQHBhcmFtIG9jY3VycmVuY2Ugc3BlY2lmeSB3aGljaCBvbmNjdXJyZW5jZSBvZiB0ZXh0IHRvIHNlbGVjdCBpZiBtdWx0aXBsZSBhcmUgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBhc3luYyBzZWxlY3RUZXh0ICh0ZXh0OiBzdHJpbmcsIG9jY3VycmVuY2UgPSAxKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGxpbmVOdW0gPSBhd2FpdCB0aGlzLmdldExpbmVPZlRleHQodGV4dCwgb2NjdXJyZW5jZSlcbiAgICAgICAgaWYgKGxpbmVOdW0gPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRleHQgJyR7dGV4dH0nIG5vdCBmb3VuZGApXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW5lID0gYXdhaXQgdGhpcy5nZXRUZXh0QXRMaW5lKGxpbmVOdW0pXG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IGxpbmUuaW5kZXhPZih0ZXh0KSArIDFcblxuICAgICAgICBhd2FpdCB0aGlzLm1vdmVDdXJzb3IobGluZU51bSwgY29sdW1uKVxuXG4gICAgICAgIGF3YWl0IGJyb3dzZXIuYWN0aW9uKCdrZXknKVxuICAgICAgICAgICAgLmRvd24oQ01EX0tFWSkuZG93bihLZXkuU2hpZnQpLmRvd24oS2V5LkFycm93UmlnaHQpXG4gICAgICAgICAgICAucGF1c2UoMTApXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkudXAoS2V5LlNoaWZ0KS51cChLZXkuQXJyb3dSaWdodClcbiAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRleHQgdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQgYXMgc3RyaW5nXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U2VsZWN0ZWRUZXh0ICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgIC5kb3duKENNRF9LRVkpLmRvd24oJ2MnKVxuICAgICAgICAgICAgLnVwKENNRF9LRVkpLnVwKCdjJylcbiAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgcmV0dXJuIGNsaXBib2FyZC5yZWFkKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNlbGVjdGlvbiBibG9jayBhcyBhIHBhZ2Ugb2JqZWN0XG4gICAgICogQHJldHVybnMgU2VsZWN0aW9uIHBhZ2Ugb2JqZWN0XG4gICAgICovXG4gICAgYXN5bmMgZ2V0U2VsZWN0aW9uICgpOiBQcm9taXNlPFNlbGVjdGlvbiB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBhd2FpdCB0aGlzLnNlbGVjdGlvbiQkXG4gICAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMubG9jYXRvck1hcCwgc2VsZWN0aW9uWzBdIGFzIGFueSwgdGhpcylcbiAgICB9XG5cbiAgICBhc3luYyBvcGVuRmluZFdpZGdldCAoKTogUHJvbWlzZTxGaW5kV2lkZ2V0PiB7XG4gICAgICAgIGF3YWl0IGJyb3dzZXIua2V5cyhbQ01EX0tFWSwgJ2YnXSlcbiAgICAgICAgY29uc3Qgd2lkZ2V0ID0gYXdhaXQgYnJvd3Nlci4kKHRoaXMubG9jYXRvcnMuZmluZFdpZGdldClcbiAgICAgICAgYXdhaXQgd2lkZ2V0LndhaXRGb3JEaXNwbGF5ZWQoeyB0aW1lb3V0OiAyMDAwIH0pXG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgcmV0dXJuIG5ldyBGaW5kV2lkZ2V0KHRoaXMubG9jYXRvck1hcCwgd2lkZ2V0IGFzIGFueSwgdGhpcylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGdpdmVuIHRleHQgdG8gdGhlIGdpdmVuIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIGxpbmUgbnVtYmVyIG9mIHRoZSBsaW5lIHRvIHR5cGUgaW50b1xuICAgICAqIEBwYXJhbSBjb2x1bW4gbnVtYmVyIG9mIHRoZSBjb2x1bW4gdG8gc3RhcnQgdHlwaW5nIGF0XG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHRoZSB0ZXh0IGlzIHR5cGVkIGluXG4gICAgICovXG4gICAgYXN5bmMgdHlwZVRleHRBdCAobGluZTogbnVtYmVyLCBjb2x1bW46IG51bWJlciwgdGV4dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMubW92ZUN1cnNvcihsaW5lLCBjb2x1bW4pXG4gICAgICAgIGNvbnN0IGlucHV0YXJlYSA9IGF3YWl0IHRoaXMuZWxlbS4kKHRoaXMubG9jYXRvck1hcC5FZGl0b3IuaW5wdXRBcmVhIGFzIHN0cmluZylcbiAgICAgICAgYXdhaXQgaW5wdXRhcmVhLmFkZFZhbHVlKHRleHQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHlwZSBnaXZlbiB0ZXh0IGF0IHRoZSBjdXJyZW50IGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byB0eXBlXG4gICAgICogQHJldHVybnMgcHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgdGV4dCBpcyB0eXBlZCBpblxuICAgICAqL1xuICAgIGFzeW5jIHR5cGVUZXh0ICh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgaW5wdXRhcmVhID0gYXdhaXQgdGhpcy5lbGVtLiQodGhpcy5sb2NhdG9yTWFwLkVkaXRvci5pbnB1dEFyZWEgYXMgc3RyaW5nKVxuICAgICAgICBhd2FpdCBpbnB1dGFyZWEuYWRkVmFsdWUodGV4dClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIGdpdmVuIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIGxpbmUgbGluZSBudW1iZXIgdG8gbW92ZSB0b1xuICAgICAqIEBwYXJhbSBjb2x1bW4gY29sdW1uIG51bWJlciB0byBtb3ZlIHRvXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgY3Vyc29yIGhhcyByZWFjaGVkIHRoZSBnaXZlbiBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIGFzeW5jIG1vdmVDdXJzb3IgKGxpbmU6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGxpbmUgPCAxIHx8IGxpbmUgPiBhd2FpdCB0aGlzLmdldE51bWJlck9mTGluZXMoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5lIG51bWJlciAke2xpbmV9IGRvZXMgbm90IGV4aXN0YClcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb2x1bW4gbnVtYmVyICR7Y29sdW1ufSBkb2VzIG5vdCBleGlzdGApXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvb3JkaW5hdGVzID0gYXdhaXQgdGhpcy5nZXRDb29yZGluYXRlcygpXG4gICAgICAgIGNvbnN0IGxpbmVHYXAgPSBjb29yZGluYXRlc1swXSAtIGxpbmVcbiAgICAgICAgY29uc3QgbGluZUtleSA9IGxpbmVHYXAgPj0gMCA/IEtleS5BcnJvd1VwIDogS2V5LkFycm93RG93blxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguYWJzKGxpbmVHYXApOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIuYWN0aW9uKCdrZXknKVxuICAgICAgICAgICAgICAgIC5kb3duKGxpbmVLZXkpLnBhdXNlKDEwKS51cChsaW5lS2V5KVxuICAgICAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB3ZGlvL25vLXBhdXNlXG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLnBhdXNlKDUwKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5wYXVzZSgxMDApXG4gICAgICAgIGNvb3JkaW5hdGVzID0gYXdhaXQgdGhpcy5nZXRDb29yZGluYXRlcygpXG4gICAgICAgIGNvbnN0IGNvbHVtbkdhcCA9IGNvb3JkaW5hdGVzWzFdIC0gY29sdW1uXG4gICAgICAgIGNvbnN0IGNvbHVtbktleSA9IGNvbHVtbkdhcCA+PSAwID8gS2V5LkFycm93TGVmdCA6IEtleS5BcnJvd1JpZ2h0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5hYnMoY29sdW1uR2FwKTsgaSArPSAxKSB7XG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgICAgICAuZG93bihjb2x1bW5LZXkpLnBhdXNlKDEwKS51cChjb2x1bW5LZXkpXG4gICAgICAgICAgICAgICAgLnBlcmZvcm0oKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIucGF1c2UoNTApXG4gICAgICAgICAgICBpZiAoKGF3YWl0IHRoaXMuZ2V0Q29vcmRpbmF0ZXMoKSlbMF0gIT09IGNvb3JkaW5hdGVzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb2x1bW4gbnVtYmVyICR7Y29sdW1ufSBpcyBub3QgYWNjZXNzaWJsZSBvbiBsaW5lICR7bGluZX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IG51bWJlciBvZiBsaW5lcyBpbiB0aGUgZWRpdG9yXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gbnVtYmVyIG9mIGxpbmVzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0TnVtYmVyT2ZMaW5lcyAoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgY29uc3QgbGluZXMgPSAoYXdhaXQgdGhpcy5nZXRUZXh0KCkpLnNwbGl0KCdcXG4nKVxuICAgICAgICByZXR1cm4gbGluZXMubGVuZ3RoXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBidWlsdC1pbiAnRm9ybWF0IERvY3VtZW50JyBvcHRpb24gdG8gZm9ybWF0IHRoZSB0ZXh0XG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgRm9ybWF0IERvY3VtZW50IGNvbW1hbmQgaXMgaW52b2tlZFxuICAgICAqL1xuICAgIGFzeW5jIGZvcm1hdERvY3VtZW50ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgbWVudSA9IGF3YWl0IHRoaXMub3BlbkNvbnRleHRNZW51KClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IG1lbnUuc2VsZWN0KCdGb3JtYXQgRG9jdW1lbnQnKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXYXJuOiBGb3JtYXQgRG9jdW1lbnQgbm90IGF2YWlsYWJsZSBmb3Igc2VsZWN0ZWQgbGFuZ3VhZ2UnKVxuICAgICAgICAgICAgaWYgKGF3YWl0IG1lbnUuZWxlbS5pc0Rpc3BsYXllZCgpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbWVudS5jbG9zZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBvcGVuQ29udGV4dE1lbnUgKCk6IFByb21pc2U8Q29udGV4dE1lbnU+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbGVtLmNsaWNrKHsgYnV0dG9uOiAyIH0pXG4gICAgICAgIGNvbnN0IHNoYWRvd1Jvb3RIb3N0ID0gYXdhaXQgdGhpcy52aWV3LmVsZW0uJCQoJy5zaGFkb3ctcm9vdC1ob3N0JylcblxuICAgICAgICBpZiAoc2hhZG93Um9vdEhvc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2hhZG93Um9vdCA9ICQoYXdhaXQgYnJvd3Nlci5leGVjdXRlKCdyZXR1cm4gYXJndW1lbnRzWzBdLnNoYWRvd1Jvb3QnLCBzaGFkb3dSb290SG9zdFswXSkpXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbnRleHRNZW51KHRoaXMubG9jYXRvck1hcCwgc2hhZG93Um9vdCkud2FpdCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLm9wZW5Db250ZXh0TWVudSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJzb3IncyBjb29yZGluYXRlcyBhcyBhbiBhcnJheSBvZiB0d28gbnVtYmVyczogYFtsaW5lLCBjb2x1bW5dYFxuICAgICAqXG4gICAgICogKipDYXV0aW9uKiogbGluZSAmIGNvbHVtbiBjb29yZGluYXRlcyBkbyBub3Qgc3RhcnQgYXQgYDBgIGJ1dCBhdCBgMWAhXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Q29vcmRpbmF0ZXMgKCk6IFByb21pc2U8W251bWJlciwgbnVtYmVyXT4ge1xuICAgICAgICBjb25zdCBjb29yZHM6IG51bWJlcltdID0gW11cbiAgICAgICAgY29uc3Qgc3RhdHVzQmFyID0gbmV3IFN0YXR1c0Jhcih0aGlzLmxvY2F0b3JNYXApXG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gPFJlZ0V4cE1hdGNoQXJyYXk+KGF3YWl0IHN0YXR1c0Jhci5nZXRDdXJyZW50UG9zaXRpb24oKSkubWF0Y2goL1xcZCsvZylcbiAgICAgICAgZm9yIChjb25zdCBjIG9mIGNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaCgrYylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Nvb3Jkc1swXSwgY29vcmRzWzFdXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBicmVha3BvaW50IG9uIGEgZ2l2ZW4gbGluZVxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbmUgdGFyZ2V0IGxpbmUgbnVtYmVyXG4gICAgICogQHJldHVybnMgcHJvbWlzZSByZXNvbHZpbmcgdG8gdHJ1ZSB3aGVuIGEgYnJlYWtwb2ludCB3YXMgYWRkZWQsIGZhbHNlIHdoZW4gcmVtb3ZlZCBvclxuICAgICAqL1xuICAgIGFzeW5jIHRvZ2dsZUJyZWFrcG9pbnQgKGxpbmU6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBtYXJnaW4gPSBhd2FpdCB0aGlzLm1hcmdpbkFyZWEkXG4gICAgICAgIGNvbnN0IGxpbmVOdW0gPSBhd2FpdCBtYXJnaW4uJCh0aGlzLmxvY2F0b3JzLmxpbmVOdW1iZXIobGluZSkpXG4gICAgICAgIGF3YWl0IGxpbmVOdW0ubW92ZVRvKClcblxuICAgICAgICBjb25zdCBsaW5lT3ZlcmxheSA9IGF3YWl0IG1hcmdpbi4kKHRoaXMubG9jYXRvcnMubGluZU92ZXJsYXkobGluZSkpXG4gICAgICAgIGNvbnN0IGJyZWFrUG9pbnQgPSBhd2FpdCBsaW5lT3ZlcmxheS4kJCh0aGlzLmxvY2F0b3JzLmJyZWFrUG9pbnQpXG4gICAgICAgIGlmIChicmVha1BvaW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IGJyZWFrUG9pbnRbMF0uY2xpY2soKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIucGF1c2UoMjAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBub0JyZWFrID0gYXdhaXQgbGluZU92ZXJsYXkuJCQodGhpcy5sb2NhdG9ycy5kZWJ1Z0hpbnQpXG4gICAgICAgIGlmIChub0JyZWFrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IG5vQnJlYWtbMF0uY2xpY2soKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIucGF1c2UoMjAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGNvZGUgbGVuc2VzIHdpdGhpbiB0aGUgZWRpdG9yXG4gICAgICogQHJldHVybnMgbGlzdCBvZiBDb2RlTGVucyBwYWdlIG9iamVjdHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRDb2RlTGVuc2VzICgpOiBQcm9taXNlPENvZGVMZW5zW10+IHtcbiAgICAgICAgY29uc3QgbGVuc2VzOiBDb2RlTGVuc1tdID0gW11cbiAgICAgICAgY29uc3Qgd2lkZ2V0cyA9IGF3YWl0IHRoaXMuZWxlbS4kKCcuY29udGVudFdpZGdldHMnKVxuICAgICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IHdpZGdldHMuJCQoJy4vL3NwYW5bY29udGFpbnMoQHdpZGdldGlkLCBcXCdjb2RlbGVucy53aWRnZXRcXCcpXScpXG5cbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgbGVuc2VzLnB1c2goYXdhaXQgbmV3IENvZGVMZW5zKHRoaXMubG9jYXRvck1hcCwgaXRlbSBhcyBhbnksIHRoaXMpLndhaXQoKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGVuc2VzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgY29kZSBsZW5zIGJhc2VkIG9uIHRpdGxlLCBvciB6ZXJvIGJhc2VkIGluZGV4XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXhPclRpdGxlIHplcm8gYmFzZWQgaW5kZXggKGNvdW50aW5nIGZyb20gdGhlIHRvcCBvZiB0aGUgZWRpdG9yKSwgb3IgcGFydGlhbCB0aXRsZSBvZiB0aGUgY29kZSBsZW5zXG4gICAgICogQHJldHVybnMgQ29kZUxlbnMgb2JqZWN0IGlmIHN1Y2ggYSBjb2RlIGxlbnMgZXhpc3RzLCB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Q29kZUxlbnMgKGluZGV4T3JUaXRsZTogbnVtYmVyIHwgc3RyaW5nKTogUHJvbWlzZTxDb2RlTGVucyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBsZW5zZXMgPSBhd2FpdCB0aGlzLmdldENvZGVMZW5zZXMoKVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXhPclRpdGxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsZW5zIG9mIGxlbnNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gYXdhaXQgbGVucy5nZXRUZXh0KClcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHRpdGxlLm1hdGNoKGluZGV4T3JUaXRsZSlcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVuc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsZW5zZXNbaW5kZXhPclRpdGxlXSkge1xuICAgICAgICAgICAgcmV0dXJuIGxlbnNlc1tpbmRleE9yVGl0bGVdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbn1cblxuaW50ZXJmYWNlIFNlbGVjdGlvbiBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBUZXh0RWRpdG9yTG9jYXRvcnM+IHt9XG4vKipcbiAqIFRleHQgc2VsZWN0aW9uIGJsb2NrXG4gKlxuICogQGNhdGVnb3J5IEVkaXRvclxuICovXG5AUGFnZURlY29yYXRvcihUZXh0RWRpdG9yTG9jYXRvcnMpXG5jbGFzcyBTZWxlY3Rpb24gZXh0ZW5kcyBFbGVtZW50V2l0aENvbnRleHRNZW51PHR5cGVvZiBUZXh0RWRpdG9yTG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ1RleHRFZGl0b3InIGFzIGNvbnN0XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtZW50OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIGVkaXRvcjogVGV4dEVkaXRvclxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZWxlbWVudClcbiAgICB9XG5cbiAgICBhc3luYyBvcGVuQ29udGV4dE1lbnUgKCk6IFByb21pc2U8Q29udGV4dE1lbnU+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbGVtLmNsaWNrKHsgYnV0dG9uOiAyIH0pXG4gICAgICAgIGNvbnN0IHNoYWRvd1Jvb3RIb3N0ID0gYXdhaXQgdGhpcy5lZGl0b3Iudmlldy5lbGVtLiQkKCcuc2hhZG93LXJvb3QtaG9zdCcpXG5cbiAgICAgICAgaWYgKHNoYWRvd1Jvb3RIb3N0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSAkKGF3YWl0IGJyb3dzZXIuZXhlY3V0ZSgncmV0dXJuIGFyZ3VtZW50c1swXS5zaGFkb3dSb290Jywgc2hhZG93Um9vdEhvc3RbMF0pKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb250ZXh0TWVudSh0aGlzLmxvY2F0b3JNYXAsIHNoYWRvd1Jvb3QpLndhaXQoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5vcGVuQ29udGV4dE1lbnUoKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2RlTGVucyBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBUZXh0RWRpdG9yTG9jYXRvcnM+IHt9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IGZvciBDb2RlIExlbnMgaW5zaWRlIGEgdGV4dCBlZGl0b3JcbiAqXG4gKiBAY2F0ZWdvcnkgRWRpdG9yXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFRleHRFZGl0b3JMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBDb2RlTGVucyBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBUZXh0RWRpdG9yTG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ1RleHRFZGl0b3InIGFzIGNvbnN0XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtZW50OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIGVkaXRvcjogVGV4dEVkaXRvclxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZWxlbWVudClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRleHQgZGlzcGxheWVkIG9uIHRoZSBjb2RlIGxlbnNcbiAgICAgKiBAcmV0dXJucyB0ZXh0IGFzIHN0cmluZ1xuICAgICAqL1xuICAgIGFzeW5jIGdldFRleHQgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBhd2FpdCB0aGlzLmVsZW0uJCgnYScpXG4gICAgICAgIHJldHVybiBsaW5rLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0b29sdGlwIG9mIHRoZSBjb2RlIGxlbnNcbiAgICAgKiBAcmV0dXJucyB0b29sdGlwIGFzIHN0cmluZ1xuICAgICAqL1xuICAgIGFzeW5jIGdldFRvb2x0aXAgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBhd2FpdCB0aGlzLmVsZW0uJCgnYScpXG4gICAgICAgIHJldHVybiBsaW5rLmdldEF0dHJpYnV0ZSgndGl0bGUnKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaW5kV2lkZ2V0IGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIEZpbmRXaWRnZXRMb2NhdG9ycz4ge31cbi8qKlxuICogVGV4dCBFZGl0b3IncyBGaW5kIFdpZGdldFxuICpcbiAqIEBjYXRlZ29yeSBFZGl0b3JcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoRmluZFdpZGdldExvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIEZpbmRXaWRnZXQgZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgRmluZFdpZGdldExvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdGaW5kV2lkZ2V0JyBhcyBjb25zdFxuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgZWxlbWVudDogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4sXG4gICAgICAgIHB1YmxpYyB0ZXh0RWRpdG9yOiBUZXh0RWRpdG9yXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBlbGVtZW50KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBiZXR3ZWVuIGZpbmQgYW5kIHJlcGxhY2UgbW9kZVxuICAgICAqIEBwYXJhbSByZXBsYWNlIHRydWUgZm9yIHJlcGxhY2UsIGZhbHNlIGZvciBmaW5kXG4gICAgICovXG4gICAgYXN5bmMgdG9nZ2xlUmVwbGFjZSAocmVwbGFjZTogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBidG4gPSBhd2FpdCB0aGlzLnRvZ2dsZVJlcGxhY2UkXG4gICAgICAgIGNvbnN0IGtsYXNzID0gYXdhaXQgYnRuLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuXG4gICAgICAgIGlmICgocmVwbGFjZSAmJiBrbGFzcy5pbmNsdWRlcygnY29sbGFwc2VkJykpIHx8ICghcmVwbGFjZSAmJiAha2xhc3MuaW5jbHVkZXMoJ2NvbGxhcHNlZCcpKSkge1xuICAgICAgICAgICAgYXdhaXQgYnRuLmFkZFZhbHVlKCcgJylcbiAgICAgICAgICAgIGNvbnN0IHJlcGwgPSBhd2FpdCBicm93c2VyLiQodGhpcy5sb2NhdG9ycy5yZXBsYWNlUGFydClcbiAgICAgICAgICAgIGF3YWl0IHJlcGwud2FpdEZvckV4aXN0KHsgdGltZW91dDogMjAwMCB9KVxuICAgICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXBsLndhaXRGb3JEaXNwbGF5ZWQoeyB0aW1lb3V0OiAyMDAwIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJlcGwud2FpdEZvckRpc3BsYXllZCh7IHRpbWVvdXQ6IDIwMDAsIHJldmVyc2U6IHRydWUgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGluIHRoZSBzZWFyY2ggYm94XG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB0byBmaWxsIGluXG4gICAgICovXG4gICAgYXN5bmMgc2V0U2VhcmNoVGV4dCAodGV4dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IGJyb3dzZXIua2V5cyhbQ01EX0tFWSwgJ2YnXSlcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5rZXlzKHRleHQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRleHQgZnJvbSBGaW5kIGlucHV0IGJveFxuICAgICAqIEByZXR1cm5zIHZhbHVlIG9mIGZpbmQgaW5wdXQgYXMgc3RyaW5nXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U2VhcmNoVGV4dCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZmluZFBhcnQgPSBhd2FpdCB0aGlzLmZpbmRQYXJ0JFxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnB1dFRleHQoZmluZFBhcnQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRleHQgaW4gdGhlIHJlcGxhY2UgYm94LiBXaWxsIHRvZ2dsZSByZXBsYWNlIG1vZGUgb24gaWYgY2FsbGVkIGluIGZpbmQgbW9kZS5cbiAgICAgKiBAcGFyYW0gdGV4dCB0ZXh0IHRvIGZpbGwgaW5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRSZXBsYWNlVGV4dCAodGV4dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMudG9nZ2xlUmVwbGFjZSh0cnVlKVxuICAgICAgICBjb25zdCByZXBsYWNlUGFydCA9IGF3YWl0IHRoaXMucmVwbGFjZVBhcnQkXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0VGV4dCh0ZXh0LCByZXBsYWNlUGFydClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGV4dCBmcm9tIFJlcGxhY2UgaW5wdXQgYm94XG4gICAgICogQHJldHVybnMgdmFsdWUgb2YgcmVwbGFjZSBpbnB1dCBhcyBzdHJpbmdcbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZXBsYWNlVGV4dCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgcmVwbGFjZVBhcnQgPSBhd2FpdCB0aGlzLnJlcGxhY2VQYXJ0JFxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnB1dFRleHQocmVwbGFjZVBhcnQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgJ05leHQgbWF0Y2gnXG4gICAgICovXG4gICAgYXN5bmMgbmV4dE1hdGNoICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IChhd2FpdCBicm93c2VyLmdldFZTQ29kZVZlcnNpb24oKSkgPCAnMS41OS4wJyA/ICdOZXh0IG1hdGNoJyA6ICdOZXh0IE1hdGNoJ1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWNrQnV0dG9uKG5hbWUsICdmaW5kJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayAnUHJldmlvdXMgbWF0Y2gnXG4gICAgICovXG4gICAgYXN5bmMgcHJldmlvdXNNYXRjaCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAoYXdhaXQgYnJvd3Nlci5nZXRWU0NvZGVWZXJzaW9uKCkpIDwgJzEuNTkuMCcgPyAnUHJldmlvdXMgbWF0Y2gnIDogJ1ByZXZpb3VzIE1hdGNoJ1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWNrQnV0dG9uKG5hbWUsICdmaW5kJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayAnUmVwbGFjZScuIE9ubHkgd29ya3MgaW4gcmVwbGFjZSBtb2RlLlxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxhY2UgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWNrQnV0dG9uKCdSZXBsYWNlJywgJ3JlcGxhY2UnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrICdSZXBsYWNlIEFsbCcuIE9ubHkgd29ya3MgaW4gcmVwbGFjZSBtb2RlLlxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxhY2VBbGwgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWNrQnV0dG9uKCdSZXBsYWNlIEFsbCcsICdyZXBsYWNlJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgd2lkZ2V0LlxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5jbGlja0J1dHRvbignQ2xvc2UnLCAnZmluZCcpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgcmVzdWx0cyBhcyBhbiBvcmRlcmVkIHBhaXIgb2YgbnVtYmVyc1xuICAgICAqIEByZXR1cm5zIHBhaXIgaW4gZm9ybSBvZiBbY3VycmVudCByZXN1bHQgaW5kZXgsIHRvdGFsIG51bWJlciBvZiByZXN1bHRzXVxuICAgICAqL1xuICAgIGFzeW5jIGdldFJlc3VsdENvdW50ICgpOiBQcm9taXNlPFtudW1iZXIsIG51bWJlcl0+IHtcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLm1hdGNoQ291bnQkXG4gICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCBjb3VudC5nZXRUZXh0KClcblxuICAgICAgICBpZiAodGV4dC5pbmNsdWRlcygnTm8gcmVzdWx0cycpKSB7XG4gICAgICAgICAgICByZXR1cm4gWzAsIDBdXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtYmVycyA9IHRleHQuc3BsaXQoJyBvZiAnKVxuICAgICAgICByZXR1cm4gWytudW1iZXJzWzBdLCArbnVtYmVyc1sxXV1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIHNlYXJjaCB0byBtYXRjaCBjYXNlXG4gICAgICogQHBhcmFtIHRvZ2dsZSB0cnVlIHRvIHR1cm4gb24sIGZhbHNlIHRvIHR1cm4gb2ZmXG4gICAgICovXG4gICAgYXN5bmMgdG9nZ2xlTWF0Y2hDYXNlICh0b2dnbGU6IGJvb2xlYW4pIHtcbiAgICAgICAgYXdhaXQgdGhpcy50b2dnbGVDb250cm9sKCdNYXRjaCBDYXNlJywgJ2ZpbmQnLCB0b2dnbGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoZSBzZWFyY2ggdG8gbWF0Y2ggd2hvbGUgd29yZHNcbiAgICAgKiBAcGFyYW0gdG9nZ2xlIHRydWUgdG8gdHVybiBvbiwgZmFsc2UgdG8gdHVybiBvZmZcbiAgICAgKi9cbiAgICBhc3luYyB0b2dnbGVNYXRjaFdob2xlV29yZCAodG9nZ2xlOiBib29sZWFuKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudG9nZ2xlQ29udHJvbCgnTWF0Y2ggV2hvbGUgV29yZCcsICdmaW5kJywgdG9nZ2xlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgc2VhcmNoIHRvIHVzZSByZWd1bGFyIGV4cHJlc3Npb25zXG4gICAgICogQHBhcmFtIHRvZ2dsZSB0cnVlIHRvIHR1cm4gb24sIGZhbHNlIHRvIHR1cm4gb2ZmXG4gICAgICovXG4gICAgYXN5bmMgdG9nZ2xlVXNlUmVndWxhckV4cHJlc3Npb24gKHRvZ2dsZTogYm9vbGVhbikge1xuICAgICAgICBhd2FpdCB0aGlzLnRvZ2dsZUNvbnRyb2woJ1VzZSBSZWd1bGFyIEV4cHJlc3Npb24nLCAnZmluZCcsIHRvZ2dsZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIHJlcGxhY2UgdG8gcHJlc2VydmUgY2FzZVxuICAgICAqIEBwYXJhbSB0b2dnbGUgdHJ1ZSB0byB0dXJuIG9uLCBmYWxzZSB0byB0dXJuIG9mZlxuICAgICAqL1xuICAgIGFzeW5jIHRvZ2dsZVByZXNlcnZlQ2FzZSAodG9nZ2xlOiBib29sZWFuKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudG9nZ2xlQ29udHJvbCgnUHJlc2VydmUgQ2FzZScsICdyZXBsYWNlJywgdG9nZ2xlKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9nZ2xlQ29udHJvbCAodGl0bGU6IHN0cmluZywgcGFydDogJ2ZpbmQnIHwgJ3JlcGxhY2UnLCB0b2dnbGU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHBhcnQgIT09ICdmaW5kJyAmJiBwYXJ0ICE9PSAncmVwbGFjZScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJwYXJ0XCIgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIFwiZmluZFwiIG9yIFwicmVwbGFjZVwiJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBwYXJ0ID09PSAnZmluZCdcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy5maW5kUGFydCRcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy5yZXBsYWNlUGFydCRcblxuICAgICAgICBpZiAocGFydCA9PT0gJ3JlcGxhY2UnKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRvZ2dsZVJlcGxhY2UodHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRyb2wgPSBhd2FpdCBlbGVtZW50LiQodGhpcy5sb2NhdG9ycy5jaGVja2JveCh0aXRsZSkpXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSBhd2FpdCBjb250cm9sLmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJylcbiAgICAgICAgaWYgKCh0b2dnbGUgJiYgY2hlY2tlZCAhPT0gJ3RydWUnKSB8fCAoIXRvZ2dsZSAmJiBjaGVja2VkID09PSAndHJ1ZScpKSB7XG4gICAgICAgICAgICBhd2FpdCBjb250cm9sLmNsaWNrKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY2xpY2tCdXR0b24gKHRpdGxlOiBzdHJpbmcsIHBhcnQ6ICdmaW5kJyB8ICdyZXBsYWNlJykge1xuICAgICAgICBpZiAocGFydCAhPT0gJ2ZpbmQnICYmIHBhcnQgIT09ICdyZXBsYWNlJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInBhcnRcIiBwYXJhbWV0ZXIgbmVlZHMgdG8gYmUgXCJmaW5kXCIgb3IgXCJyZXBsYWNlXCInKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHBhcnQgPT09ICdmaW5kJ1xuICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmZpbmRQYXJ0JFxuICAgICAgICAgICAgOiBhd2FpdCB0aGlzLnJlcGxhY2VQYXJ0JFxuXG4gICAgICAgIGlmIChwYXJ0ID09PSAncmVwbGFjZScpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG9nZ2xlUmVwbGFjZSh0cnVlKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnRuID0gYXdhaXQgZWxlbWVudC4kKHRoaXMubG9jYXRvcnMuYnV0dG9uKHRpdGxlKSlcbiAgICAgICAgYXdhaXQgYnRuLmNsaWNrKClcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5wYXVzZSgxMDApXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXRUZXh0ICh0ZXh0OiBzdHJpbmcsIGNvbXBvc2l0ZTogV2ViZHJpdmVySU8uRWxlbWVudCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGF3YWl0IGNvbXBvc2l0ZS4kKHRoaXMubG9jYXRvcnMuaW5wdXQpXG4gICAgICAgIGF3YWl0IGlucHV0LnNldFZhbHVlKHRleHQpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRJbnB1dFRleHQgKGNvbXBvc2l0ZTogV2ViZHJpdmVySU8uRWxlbWVudCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGF3YWl0IGNvbXBvc2l0ZS4kKHRoaXMubG9jYXRvcnMuY29udGVudClcbiAgICAgICAgcmV0dXJuIGlucHV0LmdldEhUTUwoZmFsc2UpXG4gICAgfVxufVxuIl19